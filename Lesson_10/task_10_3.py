"""
3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
Техническое задание:

Создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
Перегрузить арифметические операторы: сложение ('add()'), вычитание ('sub()'), умножение ('mul()'), деление ('floordiv').
Вспомнить/посмотреть какие аргументы у операторов и что они возвращают.
Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение, и деление клеток, соответственно.
Сложение. Число ячеек общей клетки равняться сумме ячеек исходных двух клеток.
Вычитание. Число ячеек общей клетки равняться разности кол-ва ячеек исходных двух клеток. Операцию необходимо выполнять,
только если разность количества ячеек двух клеток больше нуля, иначе использовать исключение -
посмотрите какой тип исключения подойдет лучше всего.
Умножение. Число ячеек общей клетки равняться произведению кол-ва ячеек исходных двух клеток.
Деление. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
Реализовать метод 'make_order()', принимающий количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида '**\n\n***...', где количество ячеек между '\n' равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Возвращаемое значение предназначено для последующей передачи в функцию print, не используйте лишних слешей в строке.
Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
В этом случае метод 'make_order()' вернёт строку: "*****\n*****\n**".
Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
Тогда метод 'make_order()' вернёт строку: '*****\n*****\n*****'.
Создать не менее пяти-семи экземпляров.
Выполнить все арифметические операторы. Подтвердить тип полученного после операций объекта.
Исходные клетки и результаты операций показать с помощью make_order
"""


class Cell:

    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        # Эти методы должны применяться только к клеткам!

        # Сложение. Число ячеек общей клетки равняться сумме ячеек исходных двух клеток.
        return self.quantity + other.quantity

    def __sub__(self, other):
        """
        Вычитание. Число ячеек общей клетки равняться разности кол-ва ячеек исходных двух клеток.
        Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля,
        иначе использовать исключение - посмотрите какой тип исключения подойдет лучше всего.
        """
        sub_cells = self.quantity - other.quantity
        if sub_cells > 0:
            return sub_cells
        else:
            raise ValueError('Error! Wrong operation!')

    def __mul__(self, other):
        # Умножение. Число ячеек общей клетки равняться произведению кол-ва ячеек исходных двух клеток.
        return self.quantity * other.quantity

    def __floordiv__(self, other):
        # Деление. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
        return self.quantity // other.quantity

    def make_order(self, cells_in_line):
        print(f'Исходная клетка: {self.quantity} ячеек. Организовываем по {cells_in_line} ячеек в ряд.')
        num_lines = self.quantity // cells_in_line
        remains = self.quantity % cells_in_line
        result = ('*' * cells_in_line + '\n') * num_lines + '*' * remains
        return result


c1 = Cell(17)
c2 = Cell(9)
c3 = Cell(3)
c4 = Cell(11)
c5 = Cell(7)
c7 = Cell(777)
print('c1 - c2 = ', c1 - c2)
print('c4 - c5 = ', c4 - c5)
print('c1 // c2 = ', c1 // c2)
print('c2 * c1 = ', c2 * c1)
print(c1.make_order(5))
print(c2.make_order(11))
print(c7.make_order(77))
print('c3 - c1 = ', c3 - c1)
