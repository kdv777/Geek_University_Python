# 2. Создать собственный класс-исключение, для обработки ситуации деления на ноль и функцию, выполняющую деление двух чисел.
# Техническое задание:
#
# Собственный Класс-исключение используется только для «подмены» исключения.
# Вы можете создать в нем конструктор, если хотите наполнить его данными.
# Функция принимает два числа и возвращает результат их деления. Она не является методом класса-исключения.
# В случае деления на ноль выкидывает исключение, упомянутое выше.
# В основой программе выполните вызов функции для различных значений (в том числе для деления на ноль - обязательно).
# Сформируйте обработку исключения в основной программе и выводите сообщение в случае деления на ноль.

class DivZeroException(Exception):
    def __str__(self):
        return 'Ошибка! Деление на ноль!'


def my_division(arg1, arg2):
    # Вариант 1 с проверкой аргумента перед делением
    if arg2 == 0:
        raise DivZeroException
    else:
        result = arg1 / arg2
    return result


# Понимаю, что акой вариант совсем не питонический:  (
try:
    print(my_division(77, 0))
except DivZeroException as err:
    print(err)
try:
    print(my_division(77, 11))
except DivZeroException as err:
    print(err)
